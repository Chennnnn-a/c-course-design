一、	实验名称
五子棋
二、	实验需求分析
操作方式：键盘操作
游戏模式：双人对战；人机对战
界面设计：单色界面，绘制棋盘

三、	实验分工
为了快速高效地完成实验内容，对小组成员进行了必要的分工，促进成员的相互合作和交流，提高工作效率。具体的分工如下：
表1   成员的具体分工
姓  名	任务描述	完成情况
陈振澔	设计五子棋界面和双人对战模式	
段丙坤		

四、	概要设计
陈振澔任务部分：
1.预处理
	包含三个整型常量，分别代表数组大小，玩家1棋型，玩家2棋型
2.坐标结构体
		包含两个整型变量，分别代表棋盘行、列，用于二维数组
3.五子棋类
	公有部分：构建游戏框架
包含：模式选择，游戏结束提示
	保护部分：实现游戏不同功能
				包含：棋盘初始化，选择游戏模式，打印棋盘，电脑操作响应，
玩家操作响应，获胜判断，获胜方判断
		私有部分：创建二维动态数组
	
详细设计
预处理：
const int N = 15;	//棋盘大小15*15
const int flag1 = 1;	//玩家1或电脑标志
const int flag2 = 2;	//玩家2标志

类：
Class GoBang
	{
public:	//公有部分
		void Play()	//游戏
			变量声明：2个Position结构体，分别代表两个玩家落子坐标
					  Int mode;//获取函数ChooseMode()返回值，用于选择模式
			函数调用：ChooseMode()//选择游戏模式，无形参
					  ComputerChess(Play1, flag1)//电脑走，由段丙坤设计
					  PlayChess(Play2, player, flag)//玩家走，
										形参：坐标结构体，玩家代号，棋型代号
					  	  GetVictory(Play, player, flag)//判断获胜方输出，
形参：坐标结构体，玩家代号，棋型代号

protected:	//保护部分
void InitChessBoard()	//棋盘初始化，无形参
int ChooseMode()	//选择游戏模式
	函数调用：system("cls");系统函数，清屏
			  InitChessBoard();//初始化棋盘
	返回值：0退出
			1电脑vs玩家
			2玩家vs玩家
			返回至Play()判断游戏模式

void PrintChessBoard()	//打印棋盘
	算法设计：根据二维数组中元素对应棋型、光标和棋盘格打印棋盘

void PlayChess(Position& pos, int player, char flag)	//玩家走
				变量声明：int X = 8 - 1; int Y = 8 - 1;//定位光标初始位置（8，8）
						  char c;获取键盘键值
	函数调用：system("cls");系统函数，清屏
			  _getch();获取键值
			  PrintChessBoard();打印棋盘
	算法设计：根据获取键值修改X,Y值，并以此定位数组元素；
修改元素值得到对应字符；
限定X,Y范围，防止越界；
判断当前位置数组中是否落子，防止覆盖棋子

int JudgeVictory(Position pos, int player)	//判断是否存在获胜
	变量声明：int begin = 0;int end = 0;//获取连子起始和结束位置
			  			  int len = 0; int start = 0;int finish = 0;//主对角线连子长度、
起始和结束位置
	算法设计：定位棋子位置和棋型，判断二维数组内行、列、对角线方向
是否5个位置均为相同棋型代号；
			  根据定位棋子位置限制判断方向，防止越界
	返回值：0未下棋
			1存在获胜
			-1和局
			返回至GetVictory(Position& pos, int player, char flag)判断
输出获胜方
bool GetVictory(Position& pos, int player, char flag)	//判断获胜方并输出结果
	函数调用：JudgeVictory(pos, player);判断是否存在获胜
	算法设计：根据形参player确定获胜方并输出结果
			返回值：true 有人获胜
					false 无人获胜
					返回至Play()判断游戏是否继续

private:	//私有部分
vector< int > Array;
			vector< vector<int> > _iChessBoard;	//构建二维动态数组
	}
数据结构：
棋子坐标结构体
typedef struct Position//坐标
{ 
    	int row;	//行
    	int col;	//列
}Position;
表示棋子坐标，用于传递所输入坐标到棋盘数组。
棋盘数组
vector< int > Array;
vector< vector<int> > _iChessBoard;	
动态二维数组
五、	调试与改进
陈振澔任务部分
1.棋子符号"○" "●"为字符串，无法存入字符型数组
修改：将字符型数组改为整型数组，按照符号对应数字选择输出
2.采用输入坐标落子的方法直观性差
	修改：改为根据键值改变数组中数值位置实现移动光标落子




六、	参考文献
